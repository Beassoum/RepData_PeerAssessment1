#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
corr <- function(directory, threshold) {
files_list <- list.files(directory, full.names=TRUE) #creates a list of files
correl <- rep(0, length(files_list))
zeros <- rep(0, length(files_list))
nozeros <- rep(0, length(files_list))
for (i in 1:length(files_list)) {
dat <- read.csv(files_list[i])
nobs <- nrow(na.omit(dat))
correl[i] <- 0
if (nobs > threshold) {
correl[i] <- cor(dat$sulfate, dat$nitrate, use = "complete")
}
if (correl[i]!=0) {
nozeros[i] <- 1
}
}
if (sum(nozeros)==0) {
result <- zeros
} else {
result <- subset(correl, correl[i]!=0)
}
print(result)
}
str(str)
str(lm)
str(ls)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <- gl(40, 10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
m[,1]
s <- split(aiquality, airquality$Month)
s <- split(airquality, airquality$Month)
str(s)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 - 0.3*x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10, replace=TRUE)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10,0,20)
y <- 0.5 + 2*x + e
summary(y)
str(y)
plot(x,y)
x
e
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flaf_colors <- flags[ , 11:17]
flag_colors <- flags[ , 11:17]
head(flag_colors)
lappy(flag_colors, sum)
lapply(flag_colors, sum)
sapply(flag-colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[ , 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_val, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plats)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
letters
str(letters)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100, prob=0.7)
flips2 <- rbinom(1, 100, prob=0.7)
flips2 <- rbinom(100, 1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(100,25)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(, t1, units='days'))
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=speed, y=dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5), ]; X$var2[c(1,3)]=NA
X
fakeData = rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units="Mb")
?bitops
??bitops
??bitops
??Hmisc
library(reshape2)
??dplyr
??plyr
install.packages("XML")
install.packages("jsonlite")
install.packages("rhdf5")
library(XLConnect)
library(XLConnect)
library(xlsx)
?rJava
??rJava
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
source("quizz 1 q5.R")
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
library(data.table)
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
colours()
colors()
source("http://bioconductor.or/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data=airquality)
airquality <- transform(airquality, Month=factor(Month))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5, 1))
library(ggplot2)
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat[50, 2] <- 100
plot(testdat$x, testdat$y, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x=x, y=y))
install.packages("httpuv")
?reqire()
require
?require
install.packages("sqldf")
set.seed(1234)
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1), each=4), sd=0.2)
plot(x, y, col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x=x, y=y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
kmeansObj <- kmeans(dataFrame, centers=3)
names(kmeansObj)
kmeansObj$cluster
par(mar=rep(0.2, 4))
plot(x, y, col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)
kmeansObj2 <- kmeans(dataMatrix, centers=3)
par(nfrow=c(1,2), mar=c(2,4,0.1,0.1))
par(mfrow=c(1,2), mar=c(2,4,0.1,0.1))
image(t(dataMatrix)[ , nrow(dataMatrix):1], yaxt="n")
image(t(dataMatrix)[ , order(kmeansObj2$cluster)], yaxt="n")
set.seed(12345)
par(mar=rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[ , nrow(dataMatrix):1])
par(mar=rep(0.2, 4))
heatmap(dataMatrix)
source("http://bioconductor.or/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
library(impute)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len=10))
library(RcolorBrewer)
x  <- rnorm(10000)
y  <- rnorm(10000)
smoothScatter(x, y)
x <- 5:19
y <- 10:24
z <- plot(x,y)
z <- xyplot(x,y)
library(lattice)
z <- xyplot(x,y)
x <- as.numeric(5:19)
y <- as.numeric(10:24)
z <- xyplot(x,y)
library(datasets)
z <- xplot(Ozone ~ Wind, data=airquality)
z <- xyplot(Ozone ~ Wind, data=airquality)
z
str(z)
class(z)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
?points()
?llines()
?axis()
?lines()
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?par()
?splom()
?trellis.par.set()
?print.trellis()
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom()
?geom
??geom
?qplot
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator=rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam=spam[trainIndicator==1, ]
testSpam=spam[trainIndicator==0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$Type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+1))
hCluster=hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated=hclust(dist(t(trainSpam[, 1:55]+1)))
plot(hClusterUpdated)
hClusterUpdated=hclust(dist(t(trainSpam[, 1:55]+1))))
hClusterUpdated=hclust(dist(t(log10(trainSpam[, 1:55]+1))))
plot(hClusterUpdated)
install.packages("ctv")
install.packages("ctv")
install.packages("manipulate")
??MASS
sessionInfo()
sessionInfo()
x <- 1:4
y <- x/sum(x)
temp <- rbind(x, p)
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(p)
sum(p*x)
p*x
(0.75*0.5)/((0.75*.5)+(0.48*0.5))
(0.75*0.3)/((0.75*.3)+(0.48*0.3))
(0.75*0.3)/((0.75*.3)+(0.48*0.7))
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
1/sqrt(n)
sd(apply(matrix(runif(nosim*n), nosim), 1, mean))
1/sqrt(12*n)
sd(apply(matrix(rpois(nosim*n, 4), nosim), 1, mean))
2/sqrt(n)
sd(apply(matrix(sample(0:1, nosim*n, replace=TRUE), nosim), 1, mean))
1/(2*sqrt(n))
library(UsingR)
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
round(c(var(x), var(x)/n, sd(x), sd(x)/sqrt(n)), 2)
choose(8, 7)*0.5^8 + choose(8, 8)*0.5^8
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
pnorm(1160, mean=1020, sd=50, lower.tail=FALSE)
pnorm(2.8, lower.tail=FALSE)
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
library(ggplot2)
g <- ggplot(data.frame(x=1:n, y=means), aes(x=x, y=y))
g <- g + geom_hline(yintercept=0) + geom_line(size=2)
g <- labs(x="Number of obs", y="Cumulative mean")
g
g <- ggplot(data.frame(x=1:n, y=means), aes(x=x, y=y))
g <- g + geom_hline(yintercept=0) + geom_line(size=2)
g <- g + labs(x="Number of obs", y="Cumulative mean")
g
x <- 1000
xvals <- seq(-5, 5, length=k)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df) {
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal", "T"), c(k,k))))
g  <- ggplot(d, aes(x=x, y=y))
g  <- g + geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length=k)
myplot <- function(df) {
d <- data.frame(y=c(dnorm(xvals), dt(xvals, df)),
x=xvals,
dist=factor(rep(c("Normal", "T"), c(k,k))))
g  <- ggplot(d, aes(x=x, y=y))
g  <- g + geom_line(size=2, aes(colour=dist))
g
}
manipulate(myplot(mu), mu=slider(1, 20, step=1))
library(manipulate)
pvals <- seq(0.5, 0.99, by=0.01)
myplot2  <- function(df) {
d <- data.frame(n=qnorm(pvals), t=qt(pvals, df),
p=pvals)
g <- ggplot(d, aes(x=n, y=t))
g <- g + geom_abline(size=2, col="lightblue")
g <- g + geom_line(size=2, col="black")
g <- g + geom_vline(xintercept=qnorm(0.975))
g <- g + geom_hline(yintercept=qt(0.975, df))
g
}
manipulate(myplot2(df), df=slider(1, 20, step=1))
data(sleep)
head(sleep)
library(datasets)
data(ChickWeight)
library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick - Time, value.var = "weight")
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep="")
library(dplyr)
wideCW <- mutate(wideCW, gain=time21-time0)
setwd("C:/Users/BEASSOUM/RepData_PeerAssessment1")
unzip("activity.zip")
install.packages(c("abind", "arm", "formatR", "gstat", "highr", "jsonlite", "latentnet", "lattice", "lavaan", "manipulate", "MASS", "Matrix", "mgcv", "mi", "mime", "mnormt", "pscl", "questionr", "rgdal", "sandwich", "tmap", "zoo"))
str(data$steps)
str("steps")
str(steps)
?hist
?hist
